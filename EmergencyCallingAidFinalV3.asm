.MODEL SMALL
.STACK 100H   

.DATA
 UINP DB 13, 0, 14 DUP('$')  ; USERNAME REGISTER INPUT, MAX 12 LETTERS                    ;
 PINP DB 17, 0, 16 DUP('$')  ; PASSWORD REGISTER INPUT, MAX 16 LETTERS

 ULINP DB 13, 0, 14 DUP('$') ; USERNAME LOGIN INPUT
 PLINP DB 17, 0, 16 DUP('$') ; PASSWORD LOGIN INPUT

 WLMSG DB "        EMERGENCY CALLING AID        ", 10, 13, "$"      ;     
 WLMSG2 DB "        WELCOME        ", 10, 13, "$"   ; WELCOME MESSAGES
 WLMSG3 DB "        PRESS A KEY TO CONTINUE        ", 10, 13, "$"   ;

 UMSG DB "        USERNAME:         ", 10, 13,       ;
 DB "        PASSWORD:         $", 10, 13,       ; USERNAME AND PASSWORD TEXT

 QUESTION DB "        CHOOSE ONE OF THE FOLLOWING               ", 10, 13   ;
     DB   "        (R) REGISTER               ", 10, 13      ; MAIN MENU TEXT
     DB   "        (L) LOGIN               ", 10, 13         ;
     DB   "           ( )               $", 10, 13           ;

 ERRORMSG DB "           ERROR!        ", 10, 13          ;
  DB "     PLEASE ENSURE YOUR CORRECT RESPONSE        ", 10, 13     ;
  DB "   FOLLOW THE INSTRUCTIONS        ", 10, 13  ;   ERROR MESSAGE                ; JUST TO CLARIFY:
  DB "     ENTER CORRECT KEYS !!         ", 10, 13    ;                                ; AT FIRST I WANTED TO CREATE A FILE, WRITE THE USERNAME AND PASSWORD ONTO IT 
  DB "      USE CAPITAL LETTERS        $", 10, 13   ;                                ; AND THEN READ IT. TURN'S OUT THAT IT WAS OUT OF THE COURSE SCOPE AND IT'S NOT
                                                                                      ; CRITICAL FOR THE PROGRAM.  

 ERRORMSG2 DB "     USERNAME OR PASSWORD IS INCORRECT ", 10, 13      ; SECOND ERROR MESSAGE
      DB "            PLEASE TRY AGAIN... $"

 AFTERREGISTERMSG DB "        SIGNUP SUCCESSFULL $", 10, 13    ; AFTER REGISTRATION MESSAGE

 SLOGIN DB "                                    ", 10, 13 
   DB "        ********************************* ", 10, 13
   DB "        *        LOG IN SUCCESSFULL     * ", 10, 13 ; MESSAGE AFTER      SUCCESFUL MATCH TO THE USER NAME AND PASSWORD 
   DB "        *********************************$", 10, 13
 CHOICE DB ' '      ;O CHOICE OF USER IN MENU    

 FLOGIN DB "       USERNAME OR PASSWORD ARE INCORRECT.",10 ,13   ; FAIL TO LOGIN MESSAGE
   DB "        PLEASE TRY AGAIN", 10, 13
   DB "         ENTER CORRECT USERNAME", 10, 13
   DB "                   ENTER CORRECT PASSWORD         $", 10, 13   
      
 LOCATION1_SERVICES DB 13, 10, "SERVICES AVAILABLE AT MOGHBAZAR:", 13, 10, "1. FIRE SERVICE", 13, 10, "2. AMBULANCE", 13, 10, "3. POLICE", 13, 10, "$"

    FIRE_SERVICE_OPTIONS DB 13, 10, "FIRE SERVICE OPTIONS:", 13, 10, "1. AMBAGAN -> 2KM", 13, 10, "2. GABTOLA -> 4KM", 13, 10, "3. MIRBAG -> 7KM", 13, 10, "$"

    AMBULANCE_OPTIONS DB 13, 10, "AMBULANCE OPTIONS:", 13, 10, "1. ESKATON -> 1KM", 13, 10, "2. NOYATOLA -> 3KM", 13, 10, "3. TALTOLA -> 6KM", 13, 10, "$"

    POLICE_OPTIONS DB 13, 10, "POLICE OPTIONS:", 13, 10, "1. HATIRJHIL -> 3KM", 13, 10, "2. RAMNA -> 4KM", 13, 10, "3. WIRELESS -> 8KM", 13, 10, "$"
    
    FIRE_SERVICE_INFO DB 13, 10, "AMBAGAN INFORMATION: CALL 911", 13, 10, "GABTOLA INFORMATION: CALL 912", 13, 10, "MIRBAG INFORMATION: CALL 913", 13, 10, "$"  
    FIRE_SERVICE_INFO1 DB 13, 10, "MIRBAG INFORMATION: CALL 913", 13, 10, "GABTOLA INFORMATION: CALL 912", 13, 10, "AMBAGAN INFORMATION: CALL 911", 13, 10, "$"
    
    FIRE_SERVICE_COUNT DW 3
    FIRE_SERVICE_IDS DB 1, 2, 3  ; INITIAL IDS OF FIRE SERVICE STATIONS 
       
    AMBULANCE_INFO DB 13, 10, "ESKATON INFORMATION: CALL 921", 13, 10, "NOYATOLA INFORMATION: CALL 922", 13, 10, "TALTOLA INFORMATION: CALL 923", 13, 10, "$"
    AMBULANCE_INFO1 DB 13, 10, "TALTOLA INFORMATION: CALL 923", 13, 10, "NOYATOLA INFORMATION: CALL 922", 13, 10, "ESKATON INFORMATION: CALL 921", 13, 10, "$"

    AMBULANCE_COUNT DW 3
    AMBULANCE_IDS DB 1, 2, 3 ; INITIAL IDS OF AMBULANCE OPTIONS
    
    POLICE_INFO DB 13, 10,"HATIRJHIL INFORMATION: CALL 931", 13, 10, "RAMNA INFORMATION: CALL 932", 13, 10, "WIRELESS INFORMATION: CALL 933", 13, 10, "$"
    POLICE_INFO1 DB 13, 10,"WIRELESS INFORMATION: CALL 933", 13, 10, "RAMNA INFORMATION: CALL 932", 13, 10, "HATIRJHIL INFORMATION: CALL 931", 13, 10, "$"
    
    POLICE_COUNT DW 3
    POLICE_IDS DB 1, 2, 3 ; INITIAL IDS OF FIRE POLICE STATIONS
    
    LOCATION2_SERVICES DB 13, 10, "SERVICES AVAILABLE AT MIRPUR:", 13, 10, "1. FIRE SERVICE", 13, 10, "2. AMBULANCE", 13, 10, "3. POLICE", 13, 10, "$"

    LOCATION2_FIRE_SERVICE_OPTIONS DB 13, 10, "FIRE SERVICE OPTIONS FOR MIRPUR:", 13, 10, "1. MIRPUR 10 -> 2KM", 13, 10, "2. AGARGAON -> 3KM", 13, 10, "3. TALTOLA -> 5KM", 13, 10, "$"

    LOCATION2_AMBULANCE_OPTIONS DB 13, 10, "AMBULANCE OPTIONS FOR MIRPUR:", 13, 10, "1. SHEWRAPARA -> 4KM", 13, 10, "2. MIRPUR 11 -> 6KM", 13, 10, "3. MIRPUR 1-> 9KM", 13, 10, "$"

    LOCATION2_POLICE_OPTIONS DB 13, 10, "POLICE OPTIONS FOR MIRPUR:", 13, 10, "1. MODEL -> 3KM", 13, 10, "2. PALLABI -> 6KM", 13, 10, "3. KAZIPARA -> 8KM", 13, 10, "$"
    
    LOCATION2_FIRE_INFO DB 13, 10, "MIRPUR 10 INFORMATION: CALL 961", 13, 10, "AGARGAON INFORMATION: CALL 962", 13, 10, "TALTOLA INFORMATION: CALL 963", 13, 10, "$"
    LOCATION2_FIRE_INFO1 DB 13, 10, "TALTOLA INFORMATION: CALL 963", 13, 10, "AGARGAON INFORMATION: CALL 962", 13, 10, "MIRPUR 10 INFORMATION: CALL 961", 13, 10, "$" 
   
    LOCATION2_AMBULANCE_INFO DB 13, 10, "SHEWRAPARA INFORMATION: CALL 971", 13, 10, "MIRPUR 11 INFORMATION: CALL 972", 13, 10, "MIRPUR 1 INFORMATION: CALL 973", 13, 10, "$"
    LOCATION2_AMBULANCE_INFO1 DB 13, 10, "MIRPUR 1 INFORMATION: CALL 973", 13, 10, "MIRPUR 11 INFORMATION: CALL 972", 13, 10, "SHEWRAPARA INFORMATION: CALL 971", 13, 10, "$"
        
    LOCATION2_POLICE_INFO DB 13, 10, "MODEL INFORMATION: CALL 981", 13, 10, "PALLABI INFORMATION: CALL 982", 13, 10, "KAZIPARA INFORMATION: CALL 983", 13, 10, "$"
    LOCATION2_POLICE_INFO1 DB 13, 10, "KAZIPARA INFORMATION: CALL 983", 13, 10, "PALLABI INFORMATION: CALL 982", 13, 10, "MODEL INFORMATION: CALL 981", 13, 10, "$"
    
    WELCOME_MSG DB 13, 10, "WELCOME TO THE EMERGENCY CALLING SYSTEM.", 13, 10, "CHOOSE YOUR LOCATION:", 13, 10, "1. MOGHBAZAR", 13, 10, "2. MIRPUR", 13, 10, "$"
    LOCATION_PROMPT DB 13, 10, "ENTER THE NUMBER OF YOUR LOCATION: $"

    ORDER_OPTIONS DB 13, 10, "SELECT ORDER:", 13, 10, "1. ASCENDING", 13, 10, "2. DESCENDING", 13, 10, "$"

    RETURN_TO_MENU_MSG DB 13, 10, "PRESS ANY KEY TO RETURN TO THE MAIN MENU.", 13, 10, "$"
   
 .CODE                                                        

MOV AX, @DATA                   
MOV DS, AX                                   

 WELCOME:
MOV DX, OFFSET WLMSG   ; FIRST MESSAGE
MOV AH, 09H
INT 21H

MOV DX, OFFSET WLMSG2  ; SECOND MESSAGE
MOV AH, 09H
INT 21H

MOV DX, OFFSET WLMSG3 ; THIRD MESSAGE
MOV AH, 09H
INT 21H

MOV AH, 01H   ; WAIT FOR USER TO CONTINUE
INT 21H       ;

CALL CLEAR    ; CLEAR SCREEN

 MENU:
CALL CLEAR              ; CLEAR SCREEN

MOV DX, OFFSET QUESTION ;
MOV AH, 09H             ;  PRINT MENU
INT 21H                 ;

MOV DH, 03H        ;
MOV DL, 12         ;
MOV BH, 0          ; SET CURSOR TO (12,3)
MOV AH, 02H        ; 
INT 10H

MOV AH, 01H             ; 
INT 21H                 ; READS USER'S CHOICE         

CMP AL, 'R'    ;  CHECK IF USER PICKED REGISTER OPTION

JE REGISTER           ; JUMP TO 1REGISTER LABEL

CMP AL, 'L'    ;  CHECK IF USER PICKED LOGIN OPTION

JE LOGIN             ; JUMP TO LOGIN LABEL
JMP ERROR 

 ERROR:
CALL CLEAR

MOV DX, OFFSET ERRORMSG  ;
MOV AH, 09H              ;  PRINT ERROR MESSAGE
INT 21H                  ; 

MOV AH, 08H   ; WAIT FOR USER TO CONTINUE
INT 21H       ;

 JMP MENU                 ; JUMP BACK TO MENU

 REGISTER:
CALL CLEAR           ; CLEAR SCREEN

MOV DX, OFFSET UMSG  ;
MOV AH, 09H          ; PRINT USERNAME 
INT 21H              ;           

MOV DX, 18        ;
MOV BH, 0         ; SET CURSOR TO (18,0)
MOV AH, 02H       ; 
INT 10H

MOV DX, OFFSET UINP ;
MOV AH, 0AH         ; READ USERNAME INPUT AND PUTS IT INTO UINP
INT 21H             ;

MOV DH, 01H       ;
MOV DL, 18        ;
MOV BH, 0         ; SET CURSOR TO (18,1)
MOV AH, 02H       ; 
INT 10H

MOV DX, OFFSET PINP     ;
MOV AH, 0AH             ; READS PASSWORD INPUT AND PUTS IT INTO PINP
INT 21H                 ;

CALL CLEAR

MOV DX, OFFSET AFTERREGISTERMSG    ;
MOV AH, 09H                        ;  PRINT AFTER REGISTRATION MESSAGE
INT 21H                            ;

MOV AH, 01H                        ; WAITS FOR USER TO CLICK A BUTTON
INT 21H                            ;

JMP MENU                     ; GO BACK TO MENU

 LOGIN: 
CALL CLEAR               ; CLEAR SCREEN

MOV DX, OFFSET UMSG    ;
MOV AH, 09H            ;   PRINTS USERNAME AND PASSWORD
INT 21H                ;

MOV DX, 18        ;
MOV BH, 0         ; SET CURSOR TO (18,0)
MOV AH, 02H       ; 
INT 10H

MOV DX, OFFSET ULINP  ;
MOV AH, 0AH           ;   READS USERNAME LOGIN INPUT 
INT 21H               ;

MOV DH, 01H       ;
MOV DL, 18        ;
MOV BH, 0         ; SET CURSOR TO (18,1)
MOV AH, 02H       ; 
INT 10H

MOV DX, OFFSET PLINP  ;
MOV AH, 0AH           ;   READS PASSWORD LOGIN INPUT 
INT 21H               ;

CALL CHKLENGTH ; MATCH LENGTH

MOV DX, 0      ;
MOV CX, 0      ;  RESET ALL THE REGISTERS FOR COMPUSER
MOV AX, 0      ;

JMP COMPAREU  ; CHECK IF USERNAME IS CORRECT 

 HLT

 CHKLENGTH:           ;

MOV DH, [UINP + 1]   ; FINDING THE LENGTH OF THE USERNAME THAT THE USER HAVE ENTERD
MOV DL, [ULINP + 1]  ; "                                     "                    "

CMP DH, DL           ; COMPARING THEIR LENGTHS

JNE ERROR2           ; IF THEIR LENGTHS AREN'T EQUAL THERE WILL BE AN ERROR

MOV DH, [PINP + 1]   ; FINDING THE LENGTH OF THE PASSWORD THAT THE USER HAVE ENTERD
MOV DL, [PLINP + 1]  ; "                                     "                    "

CMP DH, DL           ; COMPARING THEIR LENGTHS

JNE ERROR2           ; ERROR IF THE STRINGS DON'T HAVE THE SAME LENGTHS

RET                  ; GO BACK TO THE LOGIN MAIN

 ERROR2:             ; AFTER COMPARING ERROR

CALL CLEAR      ; CALL CLEAR

MOV DX, OFFSET ERRORMSG2     ;
MOV AH, 09H                  ; ERROR IN CASE THE USER ENTERED WRONG USERNAME AND PASSWORD
INT 21H                      ; 

MOV AH, 01H     ; WAIT FOR CLICK
INT 21H         ;

CALL CLEAR      ; CLEAR SCREEN
INT 20H         ; END THE PROGRAM          

 COMPAREU:           ; COMPARING THE USERNAMES 

MOV DH, OFFSET UINP ; GET UINP ADDRESS
ADD DH, 2       ; ADD 2 TO SKIP TO THE ACTAUL STRING

MOV DL, OFFSET ULINP  ; GET ULINP ADDRESS
ADD DL, 2       ; ADD 2 TO SKIP TO THE ACTAUL STRING

ADD DH, CL      ; ADDING THE INDEX TO THE ADDRESS SO IT CAN KNOW WHAT CHARACTER TO GO THROUGH
ADD DL, CL      ; "                                                                         "

PUSH CX         ; MAINTAINING THE INDEX COUNT

MOV BH, 0       ;
MOV BL, DH      ; GOING INTO THE MEMORY TO GET UINP ACTAUL STRING
MOV CH, [BX]    ;

MOV BH, 0       ;
MOV BL, DL      ; GOING INTO THE MEMORY TO GET ULINP ACTAUL STRING
MOV CL, [BX]    ;

CMP CL, CH      ; COMPARING THE TWO USERNAMES     

JNE ERROR2      ; IF THE USERNAMES ARE NOT THE SAME IT SUM AS AN ERROR

MOV BH, 0       ; 
MOV BL, DH      ; 
MOV AL, [BX]    ; CHEKING IF THE STRING ENDED
CMP AL, '$'     ; 

JE RESETREG     ; RESET ALL THE REGISTERS FOR THE PASSWORD COMPARE

POP CX          ; POP THE INDEX BACK OUT AGAIN SO IT COULD BE INCREASED

INC CL          ; INCREASE THE INDEX BY 1 TO GO OVER THE NEXT CHARACHTER 

JMP COMPAREU    ; JUMP BACK AGAIN TO THE HEAD OF THE LABEL TO CHECK ALL OVER AGAIN

 RESETREG:           ; RESET REGISTERS LABEL 

MOV AX, 0       ; RESET AX
MOV BX, 0       ; RESET BX
MOV CX, 0       ; RESET CX
MOV DX, 0       ; RESET DX

JMP COMPAREP    ; GO TO THE PASSWORD COMPARING

 COMPAREP:           ; COMPARING THE PASSWORDS

MOV DH, OFFSET PINP    ; GET PINP ADDRESS
ADD DH, 2       ; ADD 2 TO SKIP TO THE ACTAUL STRING

MOV DL, OFFSET PLINP   ; GET PLINP ADDRESS
ADD DL, 2       ; ADD 2 TO SKIP TO THE ACTAUL STRING

ADD DH, CL      ; ADDING THE INDEX TO THE ADDRESS SO IT CAN KNOW WHAT CHARACTER TO GO THROUGH
ADD DL, CL      ; "                                                                         "

PUSH CX         ; MAINTAINING THE INDEX COUNT

MOV BH, 0       ;
MOV BL, DH      ; GOING INTO THE MEMORY TO GET PINP ACTAUL STRING
MOV CH, [BX]    ;

MOV BH, 0       ;
MOV BL, DL      ; GOING INTO THE MEMORY TO GET PLINP ACTAUL STRING
MOV CL, [BX]    ;

CMP CL, CH      ; COMPARING THE TWO PASSWORDS     

JNE ERROR2      ; IF THE PASSWORDS ARE NOT THE SAME IT SUM AS AN ERROR

MOV BH, 0       ;
MOV BL, DH      ;
MOV AL, [BX]    ; CHEKING IF THE STRING ENDED
CMP AL, '$'     ;

JE SUCCESSLOGIN ; LETTING THE USER KNOW THAT HE ENTERD AND BOTH USERNAME AND PASSWORD ARE TRUE

POP CX          ; POP THE INDEX BACK OUT AGAIN SO IT COULD BE INCREASED

INC CL          ; INCREASE THE INDEX BY 1 TO GO OVER THE NEXT CHARACHTER
JMP COMPAREP    ; JUMP BACK AGAIN TO THE HEAD OF THE LABEL TO CHECK ALL OVER AGAIN

 SUCCESSLOGIN:       ; SUCCESSFUL LOGIN MESSAGE

CALL CLEAR      ; CLEARING THE SCREEN

MOV DX, OFFSET SLOGIN     ; 
MOV AH, 09H               ;  PRINT THE SUCCESSFUL LOGIN MESSAGE
INT 21H                   ;

MOV AH, 01H     ; WAITING FOR THE USER TO MAKE IT'S FINAL CLICK
INT 21H         ;  
JE EXECUTEMAIN ; JUMP TO EXECUTEMAIN LABEL

 INT 20H             ; END OF THE PROGRAM IN CASE THE LOGIN WAS SUCCESFUL 

 CLEAR:
MOV AH, 06H       ;
MOV AL, 00H       ;
MOV BH, 0FH       ;
MOV CX, 0         ; CLEAR SCREEN
MOV DH, 100       ;
MOV DL, 40        ;
INT 10H           ;

MOV DX, 0         ;
MOV BH, 0         ; SET CURSOR TO (0,0)
MOV AH, 02H       ; 
INT 10H 

RET               ; RETURN BACK TO WHERE IT WAS CALLED

 INT 20H             ; END OF PROGRAM NO MATTER WHAT

JMP ERROR

EXECUTEMAIN:
MOV AH, 0
MOV AL, 3
INT 10H      ; SET VIDEO MODE TO 80X25 TEXT MODE

MAIN_MENU:
CALL CLEAR      ; CALL CLEAR
MOV AH, 9
MOV DX, OFFSET WELCOME_MSG
INT 21H      ; DISPLAY A WELCOME MESSAGE

; CHOOSE YOUR LOCATION
MOV AH, 9
MOV DX, OFFSET LOCATION_PROMPT
INT 21H      ; DISPLAY LOCATION PROMPT

MOV AH, 0
MOV AL, 0XFF
INT 16H      ; INPUT A CHARACTER FROM THE KEYBOARD

CMP AL, '1'  ; CHECK IF THE USER SELECTED LOCATION 1
JE LOCATION1

CMP AL, '2'  ; CHECK IF THE USER SELECTED LOCATION 2
JE LOCATION2

JMP END

LOCATION1:
; DISPLAY LOCATION-SPECIFIC SERVICES AND INFORMATION
CALL CLEAR      ; CALL CLEAR
MOV AH, 9
MOV DX, OFFSET(LOCATION1_SERVICES)
INT 21H      ; DISPLAY LOCATION 1 SERVICES

; WAIT FOR USER INPUT TO SELECT A SERVICE
MOV AH, 1
INT 21H      ; WAIT FOR A KEY PRESS

CMP AL, '1'  ; CHECK IF THE USER SELECTED "FIRE SERVICE"
JE FIRE_SERVICE_MENU
CMP AL, '2'  ; CHECK IF THE USER SELECTED "AMBULANCE"
JE AMBULANCE_MENU
CMP AL, '3'  ; CHECK IF THE USER SELECTED "POLICE"
JE POLICE_MENU

JMP END

FIRE_SERVICE_MENU:
CALL CLEAR      ; CALL CLEAR
; DISPLAY FIRE SERVICE OPTIONS
MOV AH, 9
MOV DX, OFFSET FIRE_SERVICE_OPTIONS
INT 21H      ; DISPLAY FIRE SERVICE OPTIONS

; WAIT FOR USER INPUT TO SELECT THE ORDER
MOV AH, 9
MOV DX, OFFSET ORDER_OPTIONS
INT 21H

; WAIT FOR USER INPUT TO SELECT THE ORDER
MOV AH, 1
INT 21H      ; WAIT FOR A KEY PRESS

CMP AL, '1'  ; CHECK IF THE USER SELECTED ASCENDING ORDER
JE DISPLAY_FIRE_SERVICES_ASCENDING
CMP AL, '2'  ; CHECK IF THE USER SELECTED DESCENDING ORDER
JE DISPLAY_FIRE_SERVICES_DESCENDING

JMP END

DISPLAY_FIRE_SERVICES_ASCENDING:
CALL CLEAR    ; CLEAR SCREEN
    ; DISPLAY FIRE SERVICE OPTIONS IN ASCENDING ORDER

    ; SORTING LOGIC (ADAPTED FROM YOUR CODE)
    MOV CX, FIRE_SERVICE_COUNT
    DEC CX
ASCENDING_OUTER_LOOP:
    MOV BX, CX
ASCENDING_INNER_LOOP:
        MOV SI, BX
        ADD SI, SI   ; MULTIPLY BY 2 (SIZE OF EACH STATION STRUCTURE)
        MOV AL, OFFSET FIRE_SERVICE_IDS[SI]
        MOV DL, OFFSET FIRE_SERVICE_IDS[SI + 1]
        CMP AL, DL
        JLE ASCENDING_SKIP_SWAP
        ; SWAP THE IDS                                      1>2,3 
        XCHG AL, DL
        MOV OFFSET FIRE_SERVICE_IDS[SI], AL
        MOV OFFSET FIRE_SERVICE_IDS[SI + 1], DL
    ASCENDING_SKIP_SWAP:
        DEC BX
        JNZ ASCENDING_INNER_LOOP
    LOOP ASCENDING_OUTER_LOOP

    ; DISPLAY THE SORTED ARRAY
    MOV AH, 9
    MOV DX, OFFSET FIRE_SERVICE_INFO
    INT 21H

    ; ALLOW THE USER TO RETURN TO THE MAIN MENU
    MOV AH, 9
    MOV DX, OFFSET RETURN_TO_MENU_MSG
    INT 21H

    MOV AH, 1
    INT 21H      ; WAIT FOR A KEY PRESS

    JMP MAIN_MENU
 
DISPLAY_FIRE_SERVICES_DESCENDING:
CALL CLEAR    ; CLEAR SCREEN
    ; DISPLAY FIRE SERVICE OPTIONS IN DESCENDING ORDER

    ; SORTING LOGIC (MODIFIED FOR DESCENDING ORDER)
    MOV CX, FIRE_SERVICE_COUNT
    DEC CX
DESCENDING_OUTER_LOOP:
    MOV BX, CX
DESCENDING_INNER_LOOP:
        MOV SI, BX
        ADD SI, SI   ; MULTIPLY BY 2 (SIZE OF EACH STATION STRUCTURE)
        MOV AL, OFFSET FIRE_SERVICE_IDS[SI]
        MOV DL, OFFSET FIRE_SERVICE_IDS[SI + 1]
        CMP AL, DL
        JGE DESCENDING_SKIP_SWAP
        ; SWAP THE IDS
        XCHG AL, DL
        MOV OFFSET FIRE_SERVICE_IDS[SI], DL
        MOV OFFSET FIRE_SERVICE_IDS[SI + 1], AL
    DESCENDING_SKIP_SWAP:
        DEC BX
        JNZ DESCENDING_INNER_LOOP
    LOOP DESCENDING_OUTER_LOOP

    ; DISPLAY THE SORTED ARRAY
    MOV AH, 9
    MOV DX, OFFSET FIRE_SERVICE_INFO1
    INT 21H

    ; ALLOW THE USER TO RETURN TO THE MAIN MENU
    MOV AH, 9
    MOV DX, OFFSET RETURN_TO_MENU_MSG
    INT 21H

    MOV AH, 1
    INT 21H      ; WAIT FOR A KEY PRESS

    JMP MAIN_MENU

AMBULANCE_MENU:
CALL CLEAR      ; CALL CLEAR
; DISPLAY AMBULANCE OPTIONS
MOV AH, 9
MOV DX, OFFSET AMBULANCE_OPTIONS
INT 21H      ; DISPLAY AMBULANCE OPTIONS

; WAIT FOR USER INPUT TO SELECT THE ORDER
MOV AH, 9
MOV DX, OFFSET ORDER_OPTIONS
INT 21H

; WAIT FOR USER INPUT TO SELECT THE ORDER
MOV AH, 1
INT 21H      ; WAIT FOR A KEY PRESS

CMP AL, '1'  ; CHECK IF THE USER SELECTED ASCENDING ORDER
JE DISPLAY_AMBULANCE_SERVICES_ASCENDING
CMP AL, '2'  ; CHECK IF THE USER SELECTED DESCENDING ORDER
JE DISPLAY_AMBULANCE_SERVICES_DESCENDING

JMP END

DISPLAY_AMBULANCE_SERVICES_ASCENDING:
CALL CLEAR    ; CLEAR SCREEN
    ; DISPLAY AMBULANCE SERVICE OPTIONS IN ASCENDING ORDER

    ; SORTING LOGIC (ADAPTED FROM YOUR CODE)
    MOV CX, AMBULANCE_COUNT
    DEC CX
ASCENDING_OUTER_LOOP2:
    MOV BX, CX
ASCENDING_INNER_LOOP2:
        MOV SI, BX
        ADD SI, SI   ; MULTIPLY BY 2 (SIZE OF EACH STATION STRUCTURE)
        MOV AL, OFFSET AMBULANCE_IDS[SI]
        MOV DL, OFFSET AMBULANCE_IDS[SI + 1]
        CMP AL, DL
        JLE ASCENDING_SKIP_SWAP2
        ; SWAP THE IDS
        XCHG AL, DL
        MOV OFFSET AMBULANCE_IDS[SI], AL
        MOV OFFSET AMBULANCE_IDS[SI + 1], DL
    ASCENDING_SKIP_SWAP2:
        DEC BX
        JNZ ASCENDING_INNER_LOOP2
    LOOP ASCENDING_OUTER_LOOP2

    ; DISPLAY THE SORTED ARRAY
    MOV AH, 9
    MOV DX, OFFSET AMBULANCE_INFO
    INT 21H

    ; ALLOW THE USER TO RETURN TO THE MAIN MENU
    MOV AH, 9
    MOV DX, OFFSET RETURN_TO_MENU_MSG
    INT 21H

    MOV AH, 1
    INT 21H      ; WAIT FOR A KEY PRESS

    JMP MAIN_MENU

DISPLAY_AMBULANCE_SERVICES_DESCENDING:
CALL CLEAR    ; CLEAR SCREEN
    ; DISPLAY AMBULANCE SERVICE OPTIONS IN DESCENDING ORDER

    ; SORTING LOGIC (MODIFIED FOR DESCENDING ORDER)
    MOV CX, AMBULANCE_COUNT
    DEC CX
DESCENDING_OUTER_LOOP2:
    MOV BX, CX
DESCENDING_INNER_LOOP2:
        MOV SI, BX
        ADD SI, SI   ; MULTIPLY BY 2 (SIZE OF EACH STATION STRUCTURE)
        MOV AL, OFFSET AMBULANCE_IDS[SI]
        MOV DL, OFFSET AMBULANCE_IDS[SI + 1]
        CMP AL, DL
        JGE DESCENDING_SKIP_SWAP2
        ; SWAP THE IDS
        XCHG AL, DL
        MOV OFFSET AMBULANCE_IDS[SI], DL
        MOV OFFSET AMBULANCE_IDS[SI + 1], AL
    DESCENDING_SKIP_SWAP2:
        DEC BX
        JNZ DESCENDING_INNER_LOOP2
    LOOP DESCENDING_OUTER_LOOP2

    ; DISPLAY THE SORTED ARRAY
    MOV AH, 9
    MOV DX, OFFSET AMBULANCE_INFO1
    INT 21H

    ; ALLOW THE USER TO RETURN TO THE MAIN MENU
    MOV AH, 9
    MOV DX, OFFSET RETURN_TO_MENU_MSG
    INT 21H

    MOV AH, 1
    INT 21H      ; WAIT FOR A KEY PRESS

    JMP MAIN_MENU

POLICE_MENU:
CALL CLEAR      ; CALL CLEAR
; DISPLAY POLICE OPTIONS
MOV AH, 9
MOV DX, OFFSET POLICE_OPTIONS
INT 21H      ; DISPLAY POLICE OPTIONS

; WAIT FOR USER INPUT TO SELECT THE ORDER
MOV AH, 9
MOV DX, OFFSET ORDER_OPTIONS
INT 21H

; WAIT FOR USER INPUT TO SELECT THE ORDER
MOV AH, 1
INT 21H      ; WAIT FOR A KEY PRESS

CMP AL, '1'  ; CHECK IF THE USER SELECTED ASCENDING ORDER
JE DISPLAY_POLICE_SERVICES_ASCENDING
CMP AL, '2'  ; CHECK IF THE USER SELECTED DESCENDING ORDER
JE DISPLAY_POLICE_SERVICES_DESCENDING

JMP END

DISPLAY_POLICE_SERVICES_ASCENDING:
CALL CLEAR      ; CALL CLEAR
    ; DISPLAY POLICE SERVICE OPTIONS IN ASCENDING ORDER

    ; SORTING LOGIC (ADAPTED FROM YOUR CODE)
    MOV CX, POLICE_COUNT
    DEC CX
ASCENDING_OUTER_LOOP3:
    MOV BX, CX
ASCENDING_INNER_LOOP3:
        MOV SI, BX
        ADD SI, SI   ; MULTIPLY BY 2 (SIZE OF EACH STATION STRUCTURE)
        MOV AL, OFFSET POLICE_IDS[SI]
        MOV DL, OFFSET POLICE_IDS[SI + 1]
        CMP AL, DL
        JLE ASCENDING_SKIP_SWAP3
        ; SWAP THE IDS
        XCHG AL, DL
        MOV OFFSET POLICE_IDS[SI], AL
        MOV OFFSET POLICE_IDS[SI + 1], DL
    ASCENDING_SKIP_SWAP3:
        DEC BX
        JNZ ASCENDING_INNER_LOOP3
    LOOP ASCENDING_OUTER_LOOP3

    ; DISPLAY THE SORTED ARRAY
    MOV AH, 9
    MOV DX, OFFSET POLICE_INFO
    INT 21H

    ; ALLOW THE USER TO RETURN TO THE MAIN MENU
    MOV AH, 9
    MOV DX, OFFSET RETURN_TO_MENU_MSG
    INT 21H

    MOV AH, 1
    INT 21H      ; WAIT FOR A KEY PRESS

    JMP MAIN_MENU

DISPLAY_POLICE_SERVICES_DESCENDING:
CALL CLEAR      ; CALL CLEAR
    ; DISPLAY POLICE SERVICE OPTIONS IN DESCENDING ORDER

    ; SORTING LOGIC (MODIFIED FOR DESCENDING ORDER)
    MOV CX, POLICE_COUNT
    DEC CX
DESCENDING_OUTER_LOOP3:
    MOV BX, CX
DESCENDING_INNER_LOOP3:
        MOV SI, BX
        ADD SI, SI   ; MULTIPLY BY 2 (SIZE OF EACH STATION STRUCTURE)
        MOV AL, OFFSET POLICE_IDS[SI]
        MOV DL, OFFSET POLICE_IDS[SI + 1]
        CMP AL, DL
        JGE DESCENDING_SKIP_SWAP3
        ; SWAP THE IDS
        XCHG AL, DL
        MOV OFFSET POLICE_IDS[SI], DL
        MOV OFFSET POLICE_IDS[SI + 1], AL
    DESCENDING_SKIP_SWAP3:
        DEC BX
        JNZ DESCENDING_INNER_LOOP3
    LOOP DESCENDING_OUTER_LOOP3

    ; DISPLAY THE SORTED ARRAY
    MOV AH, 9
    MOV DX, OFFSET POLICE_INFO1
    INT 21H

    ; ALLOW THE USER TO RETURN TO THE MAIN MENU
    MOV AH, 9
    MOV DX, OFFSET RETURN_TO_MENU_MSG
    INT 21H

    MOV AH, 1
    INT 21H      ; WAIT FOR A KEY PRESS

    JMP MAIN_MENU

;JMP END

LOCATION2:
CALL CLEAR      ; CALL CLEAR
; DISPLAY LOCATION-SPECIFIC SERVICES AND INFORMATION FOR LOCATION 2
MOV AH, 9
MOV DX, OFFSET(LOCATION2_SERVICES)
INT 21H      ; DISPLAY LOCATION 2 SERVICES

; WAIT FOR USER INPUT TO SELECT A SERVICE FOR LOCATION 2
MOV AH, 1
INT 21H      ; WAIT FOR A KEY PRESS

CMP AL, '1'  ; CHECK IF THE USER SELECTED "FIRE SERVICE"
JE LOCATION2_FIRE_SERVICE_MENU
CMP AL, '2'  ; CHECK IF THE USER SELECTED "AMBULANCE"
JE LOCATION2_AMBULANCE_MENU
CMP AL, '3'  ; CHECK IF THE USER SELECTED "POLICE"
JE LOCATION2_POLICE_MENU

JMP END

LOCATION2_FIRE_SERVICE_MENU:
CALL CLEAR      ; CALL CLEAR
; DISPLAY FIRE SERVICE OPTIONS FOR LOCATION 2
MOV AH, 9
MOV DX, OFFSET LOCATION2_FIRE_SERVICE_OPTIONS
INT 21H      ; DISPLAY FIRE SERVICE OPTIONS FOR LOCATION 2

; WAIT FOR USER INPUT TO SELECT THE ORDER
MOV AH, 9
MOV DX, OFFSET ORDER_OPTIONS
INT 21H

; WAIT FOR USER INPUT TO SELECT THE ORDER
MOV AH, 1
INT 21H      ; WAIT FOR A KEY PRESS

CMP AL, '1'  ; CHECK IF THE USER SELECTED ASCENDING ORDER
JE LOCATION2_DISPLAY_FIRE_SERVICES_ASCENDING
CMP AL, '2'  ; CHECK IF THE USER SELECTED DESCENDING ORDER
JE LOCATION2_DISPLAY_FIRE_SERVICES_DESCENDING

JMP END

LOCATION2_DISPLAY_FIRE_SERVICES_ASCENDING:
CALL CLEAR      ; CALL CLEAR
; DISPLAY FIRE SERVICE OPTIONS IN ASCENDING ORDER FOR LOCATION 2
    ; SORTING LOGIC (ADAPTED FROM YOUR CODE)
    MOV CX, FIRE_SERVICE_COUNT
    DEC CX
ASCENDING_OUTER_LOOP4:
    MOV BX, CX
ASCENDING_INNER_LOOP4:
        MOV SI, BX
        ADD SI, SI   ; MULTIPLY BY 2 (SIZE OF EACH STATION STRUCTURE)
        MOV AL, OFFSET FIRE_SERVICE_IDS[SI]
        MOV DL, OFFSET FIRE_SERVICE_IDS[SI + 1]
        CMP AL, DL
        JLE ASCENDING_SKIP_SWAP4
        ; SWAP THE IDS
        XCHG AL, DL
        MOV OFFSET FIRE_SERVICE_IDS[SI], AL
        MOV OFFSET FIRE_SERVICE_IDS[SI + 1], DL
    ASCENDING_SKIP_SWAP4:
        DEC BX
        JNZ ASCENDING_INNER_LOOP4
    LOOP ASCENDING_OUTER_LOOP4

    ; DISPLAY THE SORTED ARRAY
    MOV AH, 9
    MOV DX, OFFSET LOCATION2_FIRE_INFO
    INT 21H

    ; ALLOW THE USER TO RETURN TO THE MAIN MENU
    MOV AH, 9
    MOV DX, OFFSET RETURN_TO_MENU_MSG
    INT 21H

    MOV AH, 1
    INT 21H      ; WAIT FOR A KEY PRESS

    JMP MAIN_MENU

LOCATION2_DISPLAY_FIRE_SERVICES_DESCENDING:
CALL CLEAR      ; CALL CLEAR
; DISPLAY FIRE SERVICE OPTIONS IN DESCENDING ORDER FOR LOCATION 2
; SORTING LOGIC (MODIFIED FOR DESCENDING ORDER)
    MOV CX, FIRE_SERVICE_COUNT
    DEC CX
DESCENDING_OUTER_LOOP4:
    MOV BX, CX
DESCENDING_INNER_LOOP4:
        MOV SI, BX
        ADD SI, SI   ; MULTIPLY BY 2 (SIZE OF EACH STATION STRUCTURE)
        MOV AL, OFFSET FIRE_SERVICE_IDS[SI]
        MOV DL, OFFSET FIRE_SERVICE_IDS[SI + 1]
        CMP AL, DL
        JGE DESCENDING_SKIP_SWAP4
        ; SWAP THE IDS
        XCHG AL, DL
        MOV OFFSET FIRE_SERVICE_IDS[SI], DL
        MOV OFFSET FIRE_SERVICE_IDS[SI + 1], AL
    DESCENDING_SKIP_SWAP4:
        DEC BX
        JNZ DESCENDING_INNER_LOOP4
    LOOP DESCENDING_OUTER_LOOP4

    ; DISPLAY THE SORTED ARRAY
    MOV AH, 9
    MOV DX, OFFSET LOCATION2_FIRE_INFO1 
    INT 21H

    ; ALLOW THE USER TO RETURN TO THE MAIN MENU
    MOV AH, 9
    MOV DX, OFFSET RETURN_TO_MENU_MSG
    INT 21H

    MOV AH, 1
    INT 21H      ; WAIT FOR A KEY PRESS

    JMP MAIN_MENU

LOCATION2_AMBULANCE_MENU:
CALL CLEAR      ; CALL CLEAR
; DISPLAY AMBULANCE OPTIONS FOR LOCATION 2
MOV AH, 9
MOV DX, OFFSET LOCATION2_AMBULANCE_OPTIONS
INT 21H      ; DISPLAY AMBULANCE OPTIONS FOR LOCATION 2

; WAIT FOR USER INPUT TO SELECT THE ORDER
MOV AH, 9
MOV DX, OFFSET ORDER_OPTIONS
INT 21H

; WAIT FOR USER INPUT TO SELECT THE ORDER
MOV AH, 1
INT 21H      ; WAIT FOR A KEY PRESS

CMP AL, '1'  ; CHECK IF THE USER SELECTED ASCENDING ORDER
JE LOCATION2_DISPLAY_AMBULANCE_SERVICES_ASCENDING
CMP AL, '2'  ; CHECK IF THE USER SELECTED DESCENDING ORDER
JE LOCATION2_DISPLAY_AMBULANCE_SERVICES_DESCENDING

JMP END

LOCATION2_DISPLAY_AMBULANCE_SERVICES_ASCENDING:
CALL CLEAR      ; CALL CLEAR

   ; SORTING LOGIC (ADAPTED FROM YOUR CODE)
    MOV CX, AMBULANCE_COUNT
    DEC CX
ASCENDING_OUTER_LOOP5:
    MOV BX, CX
ASCENDING_INNER_LOOP5:
        MOV SI, BX
        ADD SI, SI   ; MULTIPLY BY 2 (SIZE OF EACH STATION STRUCTURE)
        MOV AL, OFFSET AMBULANCE_IDS[SI]
        MOV DL, OFFSET AMBULANCE_IDS[SI + 1]
        CMP AL, DL
        JLE ASCENDING_SKIP_SWAP5
        ; SWAP THE IDS
        XCHG AL, DL
        MOV OFFSET AMBULANCE_IDS[SI], AL
        MOV OFFSET AMBULANCE_IDS[SI + 1], DL
    ASCENDING_SKIP_SWAP5:
        DEC BX
        JNZ ASCENDING_INNER_LOOP5
    LOOP ASCENDING_OUTER_LOOP5

    ; DISPLAY THE SORTED ARRAY
    MOV AH, 9
    MOV DX, OFFSET LOCATION2_AMBULANCE_INFO
    INT 21H

    ; ALLOW THE USER TO RETURN TO THE MAIN MENU
    MOV AH, 9
    MOV DX, OFFSET RETURN_TO_MENU_MSG
    INT 21H

    MOV AH, 1
    INT 21H      ; WAIT FOR A KEY PRESS

    JMP MAIN_MENU

LOCATION2_DISPLAY_AMBULANCE_SERVICES_DESCENDING:
CALL CLEAR      ; CALL CLEAR
; DISPLAY AMBULANCE SERVICE OPTIONS IN DESCENDING ORDER FOR LOCATION 2

 ; SORTING LOGIC (MODIFIED FOR DESCENDING ORDER)
    MOV CX, AMBULANCE_COUNT
    DEC CX
DESCENDING_OUTER_LOOP5:
    MOV BX, CX
DESCENDING_INNER_LOOP5:
        MOV SI, BX
        ADD SI, SI   ; MULTIPLY BY 2 (SIZE OF EACH STATION STRUCTURE)
        MOV AL, OFFSET AMBULANCE_IDS[SI]
        MOV DL, OFFSET AMBULANCE_IDS[SI + 1]
        CMP AL, DL
        JGE DESCENDING_SKIP_SWAP5
        ; SWAP THE IDS
        XCHG AL, DL
        MOV OFFSET AMBULANCE_IDS[SI], DL
        MOV OFFSET AMBULANCE_IDS[SI + 1], AL
    DESCENDING_SKIP_SWAP5:
        DEC BX
        JNZ DESCENDING_INNER_LOOP5
    LOOP DESCENDING_OUTER_LOOP5

    ; DISPLAY THE SORTED ARRAY
    MOV AH, 9
    MOV DX, OFFSET LOCATION2_AMBULANCE_INFO1
    INT 21H

    ; ALLOW THE USER TO RETURN TO THE MAIN MENU
    MOV AH, 9
    MOV DX, OFFSET RETURN_TO_MENU_MSG
    INT 21H

    MOV AH, 1
    INT 21H      ; WAIT FOR A KEY PRESS

    JMP MAIN_MENU

LOCATION2_POLICE_MENU:
CALL CLEAR      ; CALL CLEAR
; DISPLAY POLICE OPTIONS FOR LOCATION 2
MOV AH, 9
MOV DX, OFFSET LOCATION2_POLICE_OPTIONS
INT 21H      ; DISPLAY POLICE OPTIONS FOR LOCATION 2

; WAIT FOR USER INPUT TO SELECT THE ORDER
MOV AH, 9
MOV DX, OFFSET ORDER_OPTIONS
INT 21H

; WAIT FOR USER INPUT TO SELECT THE ORDER
MOV AH, 1
INT 21H      ; WAIT FOR A KEY PRESS

CMP AL, '1'  ; CHECK IF THE USER SELECTED ASCENDING ORDER
JE LOCATION2_DISPLAY_POLICE_SERVICES_ASCENDING
CMP AL, '2'  ; CHECK IF THE USER SELECTED DESCENDING ORDER
JE LOCATION2_DISPLAY_POLICE_SERVICES_DESCENDING

JMP END

LOCATION2_DISPLAY_POLICE_SERVICES_ASCENDING:
CALL CLEAR      ; CALL CLEAR
; DISPLAY POLICE SERVICE OPTIONS IN ASCENDING ORDER FOR LOCATION 2
 ; SORTING LOGIC (ADAPTED FROM YOUR CODE)
    MOV CX, POLICE_COUNT
    DEC CX
ASCENDING_OUTER_LOOP6:
    MOV BX, CX
ASCENDING_INNER_LOOP6:
        MOV SI, BX
        ADD SI, SI   ; MULTIPLY BY 2 (SIZE OF EACH STATION STRUCTURE)
        MOV AL, OFFSET POLICE_IDS[SI]
        MOV DL, OFFSET POLICE_IDS[SI + 1]
        CMP AL, DL
        JLE ASCENDING_SKIP_SWAP6
        ; SWAP THE IDS
        XCHG AL, DL
        MOV OFFSET POLICE_IDS[SI], AL
        MOV OFFSET POLICE_IDS[SI + 1], DL
    ASCENDING_SKIP_SWAP6:
        DEC BX
        JNZ ASCENDING_INNER_LOOP6
    LOOP ASCENDING_OUTER_LOOP6

    ; DISPLAY THE SORTED ARRAY
    MOV AH, 9
    MOV DX, OFFSET LOCATION2_POLICE_INFO
    INT 21H

    ; ALLOW THE USER TO RETURN TO THE MAIN MENU
    MOV AH, 9
    MOV DX, OFFSET RETURN_TO_MENU_MSG
    INT 21H

    MOV AH, 1
    INT 21H      ; WAIT FOR A KEY PRESS

    JMP MAIN_MENU


LOCATION2_DISPLAY_POLICE_SERVICES_DESCENDING:
CALL CLEAR      ; CALL CLEAR
    ; DISPLAY POLICE SERVICE OPTIONS IN DESCENDING ORDER

    ; SORTING LOGIC (MODIFIED FOR DESCENDING ORDER)
    MOV CX, POLICE_COUNT
    DEC CX
DESCENDING_OUTER_LOOP6:
    MOV BX, CX
DESCENDING_INNER_LOOP6:
        MOV SI, BX
        ADD SI, SI   ; MULTIPLY BY 2 (SIZE OF EACH STATION STRUCTURE)
        MOV AL, OFFSET POLICE_IDS[SI]
        MOV DL, OFFSET POLICE_IDS[SI + 1]
        CMP AL, DL
        JGE DESCENDING_SKIP_SWAP6
        ; SWAP THE IDS
        XCHG AL, DL
        MOV OFFSET POLICE_IDS[SI], DL
        MOV OFFSET POLICE_IDS[SI + 1], AL
    DESCENDING_SKIP_SWAP6:
        DEC BX
        JNZ DESCENDING_INNER_LOOP6
    LOOP DESCENDING_OUTER_LOOP6

    ; DISPLAY THE SORTED ARRAY
    MOV AH, 9
    MOV DX, OFFSET LOCATION2_POLICE_INFO1
    INT 21H

    ; ALLOW THE USER TO RETURN TO THE MAIN MENU
    MOV AH, 9
    MOV DX, OFFSET RETURN_TO_MENU_MSG
    INT 21H

    MOV AH, 1
    INT 21H      ; WAIT FOR A KEY PRESS

    JMP MAIN_MENU

END:
; ADD ADMIN FEATURES HERE
; FOR EXAMPLE, ALLOW ADMIN TO VIEW USER REQUESTS

MOV AH, 4CH
INT 21H      ; TERMINATE THE PROGRAM

DW 0XAA55